# Generated by Django 4.0.2 on 2022-03-13 09:10

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=30, unique=True)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('is_active', models.BooleanField(default=True)),
                ('is_authenticated', models.BooleanField(default=True)),
                ('is_anonymous', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='College',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('college', models.CharField(max_length=32)),
            ],
            options={
                'db_table': 'college',
            },
        ),
        migrations.CreateModel(
            name='Meet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255)),
                ('purpose', models.CharField(blank=True, max_length=255)),
                ('spot', models.CharField(blank=True, max_length=255)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('meettime', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('university', models.CharField(blank=True, default='', max_length=32)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('room_type', models.IntegerField()),
                ('title', models.CharField(max_length=64)),
                ('grade_limit', models.IntegerField(blank=True, null=True)),
                ('heads_limit', models.IntegerField()),
                ('gender_limit', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('N', 'Not specified')], default='N', max_length=80)),
                ('meet_purpose', models.CharField(blank=True, max_length=255)),
                ('room_description', models.CharField(blank=True, max_length=255)),
                ('meet_status', models.CharField(choices=[('Y', 'Meeting exist'), ('N', 'Meeting not exist')], default='N', max_length=80)),
                ('room_open', models.CharField(choices=[('open', 'Open'), ('closed', 'Closed')], default='open', max_length=80)),
                ('common', models.CharField(blank=True, max_length=80)),
                ('mbti', models.CharField(blank=True, max_length=255)),
                ('interest', models.IntegerField(blank=True, null=True)),
                ('college', models.CharField(blank=True, max_length=32)),
            ],
            options={
                'db_table': 'rooms',
            },
        ),
        migrations.CreateModel(
            name='University',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('university', models.CharField(blank=True, max_length=32)),
            ],
            options={
                'db_table': 'university',
            },
        ),
        migrations.CreateModel(
            name='Withdraw',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('withdraw_reason', models.TextField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SMSAuthRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('phone_number', models.CharField(max_length=50, verbose_name='휴대폰 번호')),
                ('auth_number', models.IntegerField(null=True, verbose_name='인증 번호')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sms',
            },
        ),
        migrations.CreateModel(
            name='SchoolEmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_email', models.EmailField(blank=True, max_length=254)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'schoolemail',
            },
        ),
        migrations.CreateModel(
            name='RoomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.room')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'room_users',
                'unique_together': {('user', 'room')},
            },
        ),
        migrations.AddField(
            model_name='room',
            name='owner',
            field=models.ManyToManyField(through='users.RoomUser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(blank=True, max_length=80, null=True)),
                ('school_email', models.EmailField(blank=True, max_length=254)),
                ('birth_of_date', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=80)),
                ('entrance_year', models.IntegerField(blank=True, null=True)),
                ('grade', models.IntegerField(null=True)),
                ('nickname', models.CharField(max_length=200)),
                ('introducing', models.CharField(blank=True, max_length=255)),
                ('school_auth_status', models.CharField(choices=[('Y', 'School authentication complete'), ('N', 'School authentication necessary')], default='N', max_length=80)),
                ('registration_date', models.DateField(auto_now_add=True)),
                ('mbti', models.CharField(blank=True, max_length=255)),
                ('interest_list', models.CharField(blank=True, max_length=255)),
                ('withdrawn_status', models.CharField(choices=[('general', 'General Member'), ('withdrawal', 'Withdrawal member')], default='general', max_length=80)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'profile',
            },
        ),
        migrations.CreateModel(
            name='MeetUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('meet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.meet')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'meet_users',
                'unique_together': {('user', 'meet')},
            },
        ),
        migrations.AddField(
            model_name='meet',
            name='owner',
            field=models.ManyToManyField(through='users.MeetUser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meet',
            name='room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.room'),
        ),
        migrations.CreateModel(
            name='Major',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('major', models.CharField(max_length=32)),
                ('college', models.ForeignKey(db_column='college', on_delete=django.db.models.deletion.CASCADE, related_name='colleges', to='users.college')),
                ('university', models.ForeignKey(db_column='university', on_delete=django.db.models.deletion.CASCADE, related_name='universities', to='users.university')),
            ],
            options={
                'db_table': 'major',
            },
        ),
        migrations.AddField(
            model_name='college',
            name='university',
            field=models.ForeignKey(db_column='university', on_delete=django.db.models.deletion.CASCADE, to='users.university'),
        ),
        migrations.AddField(
            model_name='user',
            name='college',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.college'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='major',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.major'),
        ),
        migrations.AddField(
            model_name='user',
            name='university',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.university'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
